{"version":3,"sources":["redux/core.js","utility/tools.js","redux/creators.js","IssueTitle.js","CommentFeed.js","CommentFeedList.js","App.js","serviceWorker.js","index.js"],"names":["issues","createSlice","name","initialState","reducers","addIssues","state","action","payload","comments","addComments","ui","repo","page","isFetching","issueTitleTable","increPage","finishPage","startFetching","finishFetching","addIssueTitleTable","rootReducer","reducer","fetchGithub","path","params","options","headers","Headers","request_url","URLSearchParams","fetch","renderMarkdown","textList","text","join","undefined","method","body","JSON","stringify","mode","context","then","resp","markdownBody","split","map","el","trimText","content","startsWith","substring","length","endsWith","fetchComments","dispatch","getState","actions","fetchIssues","fetchedIssues","per_page","status","json","data","newIssueTitleTable","reduce","issueTable","issue","url","title","html_url","markdownText","forEach","index","moment","created_at","unix","fetchedComments","sort","direction","console","log","comment","updated_at","IssueTitle","props","issueUrl","useSelector","issueText","pop","htmlUrl","href","target","rel","className","CommentFeed","commentDate","commentText","diff","fromNow","format","issue_url","src","user","avatar_url","alt","login","dangerouslySetInnerHTML","__html","CommentFeedList","useDispatch","feedList","filteredIssues","filter","concat","a","b","pageStart","loadMore","hasMore","threshold","useWindow","key","id","App","Boolean","window","location","hostname","match","middleware","getDefaultMiddleware","thunk","process","store","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d794f69.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const issues = createSlice({\n  name: 'issues',\n  initialState: [],\n  reducers: {\n    addIssues: (state, action) => {\n      return [...state, ...action.payload];\n    }\n  }\n});\n\nexport const comments = createSlice({\n  name: 'comments',\n  initialState: [],\n  reducers: {\n    addComments: (state, action) => {\n      return [...state, ...action.payload];\n    }\n  }\n});\n\nexport const ui = createSlice({\n  name: 'ui',\n  initialState: {\n    repo: 'moonshinevfx/4drec',\n    page: 1,\n    isFetching: false,\n    issueTitleTable: {}\n  },\n  reducers: {\n    increPage: state => {state.page = state.page + 1},\n    finishPage: state => {state.page = -1},\n    startFetching: state => {state.isFetching = true},\n    finishFetching: state => {state.isFetching = false},\n    addIssueTitleTable: (state, action) => {\n      state.issueTitleTable = {...state, ...action.payload};\n    }\n  }\n});\n\n\nexport const rootReducer = {\n  ui: ui.reducer,\n  comments: comments.reducer,\n  issues: issues.reducer\n};","import base64 from \"base-64\";\nimport { authToken } from \"./setting\";\n\n\nconst DIVIDE_PATTERN = 'aaanewlineaaa';\n\n\nconst trimNewline = (content, trimText) => {\n  if (content.startsWith(trimText)) {\n    content = content.substring(trimText.length);\n  }\n  if (content.endsWith(trimText)) {\n    content = content.substring(0, content.length - trimText.length);\n  }\n  return content\n};\n\nexport const fetchGithub = (path, params={}, options={}) => {\n  let headers = new Headers();\n  if (process.env.NODE_ENV !== 'production') {\n    headers.set(\n      'Authorization',\n      'Basic ' + base64.encode(authToken)\n    );\n  }\n\n  const request_url = `https://api.github.com${path}?` + new URLSearchParams(params);\n  return fetch(request_url, {headers: headers, ...options})\n}\n\nexport const renderMarkdown = (textList, repo) => {\n  const text = textList.join(`\\r\\n${DIVIDE_PATTERN}\\r\\n`);\n  return fetchGithub(\n    '/markdown',\n    undefined,\n    {\n      method: 'POST',\n      body: JSON.stringify({\n        mode: 'gfm',\n        context: repo,\n        text: text\n      })\n    }\n  ).then(\n    resp => resp && resp.text()\n  ).then(text => {\n      let markdownBody = text.split(DIVIDE_PATTERN);\n      markdownBody = markdownBody.map(el => trimNewline(el, '<br>'))\n    return markdownBody\n  })\n}","import { ui, comments, issues } from './core';\nimport { fetchGithub, renderMarkdown } from \"../utility/tools\";\nimport moment from 'moment';\n\n\nexport const fetchIssues = page => {\n  return (dispatch, getState) => {\n    const repo = getState().ui.repo;\n\n    let fetchedIssues = undefined;\n    return fetchGithub(`/repos/${repo}/issues`, {\n      state: 'all',\n      per_page: 100,\n      page: page\n    }).then(resp => {\n      if (resp.status === 200) {\n        return resp.json();\n      }\n    }).then(data => {\n      if (!data) return;\n      if (data.length === 0) return;\n      fetchedIssues = data;\n\n      // title table\n      const newIssueTitleTable = data.reduce((issueTable, issue) => {\n        issueTable[issue.url] = {\n          title: issue.title,\n          url: issue.html_url\n        };\n        return issueTable;\n      }, {});\n      dispatch(ui.actions.addIssueTitleTable(newIssueTitleTable));\n\n      // render markdown\n      const text = fetchedIssues.map(issue => issue.body);\n      return renderMarkdown(text, repo);\n    }).then(markdownText => {\n      if (markdownText) {\n        // apply markdown to comment body\n        fetchedIssues.forEach((issue, index) => {\n          issue.body = markdownText[index];\n          issue.moment = moment(issue.created_at).unix();\n        });\n        dispatch(issues.actions.addIssues(fetchedIssues));\n        dispatch(fetchIssues(page + 1));\n      }\n    });\n  }\n};\n\nexport const fetchComments = () => {\n  return (dispatch, getState) => {\n    dispatch(ui.actions.startFetching());\n\n    const repo = getState().ui.repo;\n    const page = getState().ui.page;\n\n    // fetch issues if first time fetching\n    if (page === 1) dispatch(fetchIssues(1));\n\n    // fetch comments\n    let fetchedComments = undefined;\n\n    return fetchGithub(`/repos/${repo}/issues/comments`, {\n      sort: 'updated',\n      direction: 'desc',\n      per_page: 20,\n      page: page\n    }).then(resp => {\n      if (resp.status === 200) {\n        return resp.json();\n      }\n    }).then(data => {\n      // no comments\n      console.log()\n      if (!data || data.length === 0) {\n        dispatch(ui.actions.finishPage());\n        return;\n      }\n\n      // render markdown\n      dispatch(ui.actions.increPage());\n\n      fetchedComments = data;\n      const text = fetchedComments.map(comment => comment.body);\n      return renderMarkdown(text, repo);\n    }).then(markdownText => {\n      if (markdownText) {\n        // apply markdown to comment body\n        fetchedComments.forEach((comment, index) => {\n          comment.body = markdownText[index];\n          comment.moment = moment(comment.updated_at).unix();\n        });\n        dispatch(comments.actions.addComments(fetchedComments));\n      }\n      dispatch(ui.actions.finishFetching());\n    });\n  };\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux'\n\n\nconst IssueTitle = props => {\n  const { issueUrl } = props;\n  const issueTitleTable = useSelector(state => state.ui.issueTitleTable);\n  let issueText = issueUrl.split('/').pop();\n  let htmlUrl = '';\n  if (issueUrl in issueTitleTable) {\n    issueText = issueTitleTable[issueUrl].title;\n    htmlUrl = issueTitleTable[issueUrl].url;\n  }\n\n  return (\n    <a\n      href={htmlUrl}\n      target='_blank' rel=\"noopener noreferrer\"\n      className='issue-title'\n    >\n      #{issueText}\n    </a>\n  )\n};\n\nexport default IssueTitle;\n","import React from 'react';\nimport moment from 'moment';\n\nimport IssueTitle from \"./IssueTitle\";\n\n\nconst CommentFeed = props => {\n  const { comment } = props;\n\n  // moment\n  const commentDate = moment(comment.updated_at);\n  const toNowDays = (new moment()).diff(commentDate, 'days');\n  const commentText = toNowDays < 3 ? commentDate.fromNow() : commentDate.format('[on ]D MMM');\n\n  // get issue url\n  const issueUrl = 'title' in comment ? comment.url : comment.issue_url;\n\n  return (\n    <div className=\"comment-feed\">\n      <div className='meta'>\n        {/*user photo*/}\n        <img src={comment.user.avatar_url} alt='avatar' />\n        {/*user name*/}\n        <a\n          href={comment.user.html_url}\n          target='_blank' rel=\"noopener noreferrer\"\n          className={'username'}\n        >\n          {comment.user.login}\n        </a>\n        {/*comment date*/}\n        <span className='commented'>&nbsp;commented</span>\n        <span className='date'>&nbsp;{commentText}</span>\n        <IssueTitle issueUrl={issueUrl} />\n      </div>\n      <div className='markdown-body' dangerouslySetInnerHTML={{__html: comment.body}} />\n    </div>\n  )\n};\n\nexport default CommentFeed;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport { fetchComments } from './redux/creators'\nimport CommentFeed from './CommentFeed';\n\n\nconst CommentFeedList = () => {\n  const issues = useSelector(state => state.issues);\n  const comments = useSelector(state => state.comments);\n  const ui = useSelector(state => state.ui);\n  const dispatch = useDispatch();\n\n  let feedList = []\n  if (comments.length > 0) {\n    const filteredIssues = issues.filter(\n      issue => issue.moment >= comments[comments.length - 1].moment\n    );\n    feedList = comments.concat(filteredIssues).sort(\n      (a, b) => b.moment - a.moment\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      className='comment-feed-list'\n      pageStart={0}\n      loadMore={() => dispatch(fetchComments())}\n      hasMore={!ui.isFetching && ui.page !== -1}\n      threshold={1024}\n      useWindow={true}\n    >\n      {feedList.map(comment => {\n        return (\n          <CommentFeed key={comment.id} comment={comment}/>\n        )\n      })}\n    </InfiniteScroll>\n  )\n};\n\nexport default CommentFeedList;","import React from 'react';\nimport './App.less';\nimport CommentFeedList from \"./CommentFeedList\";\n\nconst App = () => (\n  <div className=\"App\">\n    <CommentFeedList />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport { rootReducer } from './redux/core';\n\n\nconst middleware = [\n  ...getDefaultMiddleware(),\n  thunk,\n  process.env.NODE_ENV !== 'production' && logger,\n].filter(Boolean);\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: middleware\n});\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  // </React.StrictMode>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}