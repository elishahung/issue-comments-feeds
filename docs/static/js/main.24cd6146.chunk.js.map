{"version":3,"sources":["redux/core.js","CommentFeed.js","CommentFeedList.js","redux/creators.js","App.js","serviceWorker.js","index.js"],"names":["comments","createSlice","name","initialState","reducers","addComments","state","action","payload","ui","stat","repo","page","isFetching","updateStat","increPage","finishPage","startFetching","finishFetching","rootReducer","reducer","CommentFeed","props","comment","className","src","user","avatar_url","alt","href","html_url","target","login","datetime","updated_at","source","body","CommentFeedList","useSelector","dispatch","useDispatch","pageStart","loadMore","getState","actions","params","sort","direction","per_page","headers","Headers","request_url","fetch","then","resp","status","json","data","length","hasMore","threshold","useWindow","map","key","id","App","Boolean","window","location","hostname","match","middleware","getDefaultMiddleware","thunk","process","filter","store","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24cd6146.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const comments = createSlice({\n  name: 'comments',\n  initialState: [],\n  reducers: {\n    addComments: (state, action) => {\n      return [...state, ...action.payload];\n    }\n  }\n});\n\n\nexport const ui = createSlice({\n  name: 'ui',\n  initialState: {\n    stat: 'WAIT', // WAIT, FETCH, FAIL, DONE\n    repo: 'moonshinevfx/4drec',\n    page: 1,\n    isFetching: false\n  },\n  reducers: {\n    updateStat: (state, action) => {state.stat = action.payload},\n    increPage: state => {state.page = state.page + 1},\n    finishPage: state => {state.page = -1},\n    startFetching: state => {state.isFetching = true},\n    finishFetching: state => {state.isFetching = false}\n  }\n});\n\n\nexport const rootReducer = {\n  ui: ui.reducer,\n  comments: comments.reducer\n};","import React from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport TimeAgo from 'timeago-react';\n\n\nconst CommentFeed = props => {\n  const { comment } = props;\n  return (\n    <div className=\"comment-feed\">\n      <div className='meta'>\n        <img src={comment.user.avatar_url} alt='avatar' />\n        <a href={comment.user.html_url} target='_blank' className={'username'}>{comment.user.login}</a>\n        <span>&nbsp;commented&nbsp;</span>\n        <TimeAgo\n          datetime={comment.updated_at}\n        />\n      </div>\n      <ReactMarkdown className='markdown' source={comment.body} />\n    </div>\n  )\n};\n\nexport default CommentFeed;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport { fetchComments } from './redux/creators'\nimport CommentFeed from './CommentFeed';\n\n\nconst CommentFeedList = () => {\n  const comments = useSelector(state => state.comments);\n  const ui = useSelector(state => state.ui);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"comment-feed-list\">\n      <InfiniteScroll\n        pageStart={0}\n        loadMore={() => dispatch(fetchComments())}\n        hasMore={!ui.isFetching && ui.page !== -1 && ui.stat !== 'FAIL'}\n        threshold={500}\n        useWindow={true}\n      >\n        {comments.map(comment => {\n          return (\n            <CommentFeed key={comment.id} comment={comment}/>\n          )\n        })}\n      </InfiniteScroll>\n    </div>\n  )\n};\n\nexport default CommentFeedList;","import { ui, comments } from './core';\nimport base64 from 'base-64';\nimport { authToken } from '../setting'\n\n\nexport const fetchComments = () => {\n  return (dispatch, getState) => {\n    dispatch(ui.actions.startFetching());\n\n    const repo = getState().ui.repo;\n    const page = getState().ui.page;\n\n    const params = {\n      sort: 'updated',\n      direction: 'desc',\n      per_page: 10,\n      page: page\n    }\n    let headers = new Headers();\n    if (process.env.NODE_ENV !== 'production') {\n      headers.set(\n        'Authorization',\n        'Basic ' + base64.encode(authToken)\n      );\n    }\n\n    const request_url =\n      `https://api.github.com/repos/${repo}/issues/comments?` +\n      `sort=${params.sort}&` +\n      `direction=${params.direction}&` +\n      `per_page=${params.per_page}&` +\n      `page=${params.page}`;\n\n    fetch(request_url, {headers: headers}).then(resp => {\n      if (resp.status === 200) {\n        dispatch(ui.actions.updateStat('DONE'));\n        return resp.json();\n      }else{\n        dispatch(ui.actions.updateStat('FAIL'));\n        return false;\n      }\n    }).then(data => {\n      if (!data) {\n        return\n      }\n      if (data.length === 0) {\n        dispatch(ui.actions.finishPage())\n        return;\n      }\n      dispatch(ui.actions.increPage());\n      dispatch(comments.actions.addComments(data));\n    }).then(() => {\n      dispatch(ui.actions.finishFetching());\n    });\n  };\n};\n","import React from 'react';\nimport './App.less';\nimport CommentFeedList from \"./CommentFeedList\";\n\nconst App = () => (\n  <div className=\"App\">\n    <CommentFeedList />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport { rootReducer } from './redux/core';\n\n\nconst middleware = [\n  ...getDefaultMiddleware(),\n  thunk,\n  process.env.NODE_ENV !== 'production' && logger,\n].filter(Boolean);\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: middleware\n});\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  // </React.StrictMode>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}